name: macOS

on:
  workflow_dispatch:
  push:
    paths:
      - '**'
      - 'examples/**'
      - '.github/workflows/macos.yml'
  pull_request:
    paths:
      - '**'
      - 'examples/**'
      - '.github/workflows/macos.yml'
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: write  # for actions/upload-release-asset to upload release asset
    runs-on: macos-latest
    
    env:
      RELEASE_NAME: RGFW-Odin-dev_macos
    
    steps:
    - name: Checkout
      uses: actions/checkout@master
    
    - name: Setup Release Version
      run: |
        echo "RELEASE_NAME=RGFW-Odin-${{ github.event.release.tag_name }}_macos" >> $GITHUB_ENV
      shell: bash
      if: github.event_name == 'release' && github.event.action == 'published'

    - name: Setup Environment
      run: | 
        mkdir build
        cd build
        mkdir ${{ env.RELEASE_NAME }}
        cd ${{ env.RELEASE_NAME }}
        mkdir include
        mkdir lib
        cd ../..
   
    # Generating static + shared library, note that i386 architecture is deprecated
    # Defining GL_SILENCE_DEPRECATION because OpenGL is deprecated on macOS
    - name: Build Library
      run: |
        clang --version
        
        # Extract version numbers from Makefile
        brew install grep
        
        # Build RGFW x86_64 dynamic
        make RGFW/libRGFW.dylib CUSTOM_CFLAGS="-target x86_64-apple-macos10.12 -DGL_SILENCE_DEPRECATION"
        mv RGFW/libRGFW.dylib /tmp/libRGFW_x86_64.dylib
        rm -f RGFW.o
        
        # Build RGFW arm64 dynamic
        make RGFW/libRGFW.dylib CUSTOM_CFLAGS="-target arm64-apple-macos11 -DGL_SILENCE_DEPRECATION"
        mv RGFW/libRGFW.dylib /tmp/libRGFW_arm64.dylib
        
        # Join x86_64 and arm64 dynamic
        rm -f ./build/lib/*
        lipo -create -output RGFW/libRGFW.dylib /tmp/libRGFW_x86_64.dylib /tmp/libRGFW_arm64.dylib
        ln -sv RGFW/libRGFW.dylib  build/${{ env.RELEASE_NAME }}/lib/libRGFW.dylib

        make
        
    - name: Generate Artifacts
      run: |
        cp -v ./RGFW/RGFW.h ./build/${{ env.RELEASE_NAME }}/include
        cp -v ./RGFW/RGFW.odin ./build/${{ env.RELEASE_NAME }}/lib
        cp -v ./README.md ./build/${{ env.RELEASE_NAME }}/README.mds
        cd build
        tar -czvf ${{ env.RELEASE_NAME }}.tar.gz ${{ env.RELEASE_NAME }}
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RELEASE_NAME }}.tar.gz
        path: ./build/${{ env.RELEASE_NAME }}.tar.gz
        
    - name: Upload Artifact to Release
      uses: softprops/action-gh-release@v1
      with:
        files: ./build/${{ env.RELEASE_NAME }}.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: github.event_name == 'release' && github.event.action == 'published'
